library(phytools)
data("liolaemid.data")
data("liolaemid.tree")
head(liolaemid.data)
liolaemid.data<-liolaemid.data[-1,]
parity<-setNames(liolaemid.data$parity_mode,
rownames(liolaemid.data))
temperature<-setNames(liolaemid.data$temperature,
rownames(liolaemid.data))
fit<-fitcontMk(liolaemid.tree,parity,temperature,
parallel=TRUE,ncores=10,levs=20)
fit
fit<-fitcontMk(liolaemid.tree,parity,temperature,
parallel=TRUE,ncores=10,levs=20,trace=2)
getwd()
setwd("../../documents/CV")
20000+29250+80592+1400+1500+3000+8300+2000+3500
ls()
plot(fit)
fit
list.files()
setwd("../../presentations/UConn.2025/")
list.files()
load("liolaemid_results.RData")
ls()
fit
Q<-matrix(c(-1,1,1,-1),2,2,dimnames=list(0:1,0:1))
true_tree<-pbtree(n=40,scale=1)
X<-sim.Mk(tree,Q,nsim=100)
library(phangorn)
Q<-matrix(c(-1,1,1,-1),2,2,dimnames=list(0:1,0:1))
true_tree<-pbtree(n=40,scale=1)
X<-sim.Mk(tree,Q,nsim=100)
X<-sim.Mk(true_tree,Q,nsim=100)
X
Data<-as.phyDat(X,type="USER")
Data<-as.phyDat(X,type="USER",levels=c(0,1))
Data
Data<-as.phyDat(t(X),type="USER",levels=c(0,1))
Data
Data<-as.phyDat(as.matrix(X),type="USER",levels=c(0,1))
Data
Data
fit<-pml_bb(Data)
fit<-pml_bb(Data,model="ER")
fit
plot(fit)
dev.off()
plot(fit)
plotTree(midpoint(fit$tree))
plot(cophylo(true_tree,midpoint(fit$tree)))
library(phangorn)
Q<-matrix(c(-1,1,1,-1),2,2,dimnames=list(0:1,0:1))
true_tree<-pbtree(n=40,scale=1)
X<-sim.Mk(true_tree,Q,nsim=1000)
Data<-as.phyDat(as.matrix(X),type="USER",levels=c(0,1))
Data
fit<-pml_bb(Data,model="ER")
dev.off()
plotTree(midpoint(fit$tree))
plot(cophylo(true_tree,midpoint(fit$tree)))
fit<-pml_bb(Data,model="ER",rearrangement="stochastic")
?fitcontMk
getwd()
setwd("../../")
getwd()
?bmPlot
library(phytools)
?bmPlot
?fitmultiBM
?fitThresh
?bounded_bm
?update.packages
update.packages(ask=FALSE,checkBuilt=TRUE)
update.packages(ask=FALSE,checkBuilt=TRUE)
packageVersion("phytools")
remotes::install_github("liamrevell/phytools")
library(phytools)
library(geiger)
tree<-pbtree(n=100)
Q<-matrix(c(-1,1,1,-1),2,2,dimnames=list(0:1,0:1))
args(fitDiscrete)
fit1<-fitDiscrete(tree,model="ER",transform="lambda")
fit1<-fitDiscrete(tree,x,model="ER",transform="lambda")
library(phytools)
library(geiger)
tree<-pbtree(n=100)
Q<-matrix(c(-1,1,1,-1),2,2,dimnames=list(0:1,0:1))
x<-sim.Mk(tree,Q)
y<-sim.Mk(phytools:::lambdaTree(tree,0),Q)
fit1<-fitDiscrete(tree,x,model="ER",transform="lambda")
fit1
fit2<-fitDiscrete(tree,y,model="ER",transform="lamba")
fit2<-fitDiscrete(tree,y,model="ER",transform="lambda")
fit2
phytools:::lambdaTree(tree,0)
lik<-function(theta,tree,x){
q<-theta[1]
lambda<-theta[2]
Q<-matrix(c(-q,q,q,-q),2,2)
-logLik(fitMk(tree,x,fixedQ=Q))
}
lik(c(1,0),tree,x)
fit<-optim(c(1,1),lik,
tree=tree,x=y,
method="L-BFGS-B",
lower=c(1e-8,0),upper=c(Inf,1))
fit
lik(c(1,0),tree,x)
fit<-optim(c(1,0),lik,
tree=tree,x=y,
method="L-BFGS-B",
lower=c(1e-8,0),upper=c(Inf,1))
fit
fit<-optim(c(1,0),lik,
tree=tree,x=y,
method="L-BFGS-B",
lower=c(1e-8,0),upper=c(Inf,1),
trace=1)
lik<-function(theta,tree,x){
q<-theta[1]
lambda<-theta[2]
Q<-matrix(c(-q,q,q,-q),2,2)
logL<-logLik(fitMk(tree,x,fixedQ=Q))
cat(paste("q = ",q,"; lambda =",lambda,
"; log(L) = ",logL,"\n",sep=""))
-logL
}
lik(c(1,0),tree,x)
lik<-function(theta,tree,x){
q<-theta[1]
lambda<-theta[2]
Q<-matrix(c(-q,q,q,-q),2,2)
logL<-logLik(fitMk(tree,x,fixedQ=Q))
cat(paste("q = ",round(q,4),
"; lambda = ",round(lambda,4),
"; log(L) = ",round(logL,4),"\n",sep=""))
-logL
}
lik(c(1,0),tree,x)
fit<-optim(c(1,0),lik,
tree=tree,x=y,
method="L-BFGS-B",
lower=c(1e-8,0),upper=c(Inf,1))
lik(c(1,0),tree,y)
library(phytools)
library(geiger)
tree<-pbtree(n=200)
Q<-matrix(c(-1,1,1,-1),2,2,dimnames=list(0:1,0:1))
x<-sim.Mk(tree,Q)
y<-sim.Mk(phytools:::lambdaTree(tree,0),Q)
fit1<-fitDiscrete(tree,x,model="ER",transform="lambda")
fit1
fit2<-fitDiscrete(tree,y,model="ER",transform="lambda")
fit2
fit1
fit2
lik<-function(theta,tree,x){
q<-theta[1]
lambda<-theta[2]
Q<-matrix(c(-q,q,q,-q),2,2)
logL<-logLik(fitMk(tree,x,fixedQ=Q))
cat(paste("q = ",round(q,4),
"; lambda = ",round(lambda,4),
"; log(L) = ",round(logL,4),"\n",sep=""))
-logL
}
lik(c(1,0),tree,y)
fit<-optim(c(1,0),lik,
tree=tree,x=y,
method="L-BFGS-B",
lower=c(1e-8,0),upper=c(Inf,1))
library(phytools)
library(geiger)
tree<-pbtree(n=200)
Q<-matrix(c(-1,1,1,-1),2,2,dimnames=list(0:1,0:1))
x<-sim.Mk(tree,Q)
y<-sim.Mk(phytools:::lambdaTree(tree,0.5),Q)
fit1<-fitDiscrete(tree,x,model="ER",transform="lambda")
fit1
fit2<-fitDiscrete(tree,y,model="ER",transform="lambda")
fit2
lik<-function(theta,tree,x){
q<-theta[1]
lambda<-theta[2]
Q<-matrix(c(-q,q,q,-q),2,2)
logL<-logLik(fitMk(tree,x,fixedQ=Q))
cat(paste("q = ",round(q,4),
"; lambda = ",round(lambda,4),
"; log(L) = ",round(logL,4),"\n",sep=""))
-logL
}
lik(c(1,0),tree,y)
fit<-optim(c(1,0),lik,
tree=tree,x=y,
method="L-BFGS-B",
lower=c(1e-8,0),upper=c(Inf,1))
fit<-optim(c(1,runif(1,0,1)),lik,
tree=tree,x=y,
method="L-BFGS-B",
lower=c(1e-8,0),upper=c(Inf,1))
fit<-optim(c(1,runif(1,0,1)),lik,
tree=tree,x=y,
method="L-BFGS-B",
lower=c(1e-8,0),upper=c(Inf,1))
library(phytools)
library(geiger)
tree<-pbtree(n=500)
Q<-matrix(c(-1,1,1,-1),2,2,dimnames=list(0:1,0:1))
x<-sim.Mk(tree,Q)
y<-sim.Mk(phytools:::lambdaTree(tree,0.5),Q)
fit1<-fitDiscrete(tree,x,model="ER",transform="lambda")
fit1
fit2<-fitDiscrete(tree,y,model="ER",transform="lambda")
fit2
lik<-function(theta,tree,x){
q<-theta[1]
lambda<-theta[2]
Q<-matrix(c(-q,q,q,-q),2,2)
logL<-logLik(fitMk(tree,x,fixedQ=Q))
cat(paste("q = ",round(q,4),
"; lambda = ",round(lambda,4),
"; log(L) = ",round(logL,4),"\n",sep=""))
-logL
}
lik(c(1,0),tree,y)
fit<-optim(c(1,runif(1,0,1)),lik,
tree=tree,x=y,
method="L-BFGS-B",
lower=c(1e-8,0),upper=c(Inf,1))
fit<-optim(c(1,runif(1,0,1)),lik,
tree=tree,x=y,
method="L-BFGS-B",
lower=c(1e-8,0),upper=c(10,1))
?optim
fit<-optim(c(1,runif(1,0,1)),lik,
tree=tree,x=y,
method="SANN",
lower=c(1e-8,0),upper=c(10,1))
?logit
?plogis
plogis(0)
plogis(-Inf)
plogis(Inf)
lik<-function(theta,tree,x){
q<-exp(theta[1])
lambda<-plogis(theta[2])
Q<-matrix(c(-q,q,q,-q),2,2)
logL<-logLik(fitMk(tree,x,fixedQ=Q))
cat(paste("q = ",round(q,4),
"; lambda = ",round(lambda,4),
"; log(L) = ",round(logL,4),"\n",sep=""))
-logL
}
lik(c(1,0),tree,y)
fit<-optim(c(log(1),0),lik,
tree=tree,x=y,
method="SANN")
exp(0)
log(1)
fit<-optim(c(log(0.26),0),lik,
tree=tree,x=y,
method="SANN")
file_path<-file.choose()
file_path
## load packages
## update phytools
## install.packages("phytools") ## if you want to update phytools
library(phytools)
library(phangorn)
## read our input data
vert_data<-read.csv(file_path,row.names=2)
head(vert_data)
## save common names
common_names<-vert_data$Taxon
common_names
names(common_names)<-rownames(vert_data)
names(common_names)
## save common names
common_names<-vert_data$Taxon
names(common_names)
names(common_names)<-rownames(vert_data)
common_names
vert_data[,-1]
## remove the common names from our data frame
vert_data<-vert_data[,-1]
c(0,1)
## convert our data frame to a phyDat object
vert_phyDat<-as.phyDat(as.matrix(vert_data),
type="USER",levels=c(0,1))
vert_phyDat
## read our input data
vert_data<-read.csv(file_path,row.names=2)
head(vert_data)
## save common names
common_names<-vert_data$Taxon
names(common_names)<-rownames(vert_data)
common_names
## convert our data frame to a phyDat object
vert_phyDat<-as.phyDat(as.matrix(vert_data),
type="USER",levels=c(0,1))
## read our input data
vert_data<-read.csv(file_path) #,row.names=2)
## remove the common names from our data frame
vert_data<-vert_data[,-1]
## convert our data frame to a phyDat object
vert_phyDat<-as.phyDat(as.matrix(vert_data),
type="USER",levels=c(0,1))
vert_phyDat
## get entire path to our morphological trait matrix file
file_path<-file.choose()
file_path
## load packages
## update phytools
## install.packages("phytools") ## if you want to update phytools
library(phytools)
library(phangorn)
## read our input data
vert_data<-read.csv(file_path,row.names=2)
head(vert_data)
## save common names
common_names<-vert_data$Taxon
names(common_names)<-rownames(vert_data)
common_names
## remove the common names from our data frame
vert_data<-vert_data[,-1]
## convert our data frame to a phyDat object
vert_phyDat<-as.phyDat(as.matrix(vert_data),
type="USER",levels=c(0,1))
vert_phyDat
## estimate a tree using parsimony
mp_vert<-pratchet(vert_phyDat)
mp_vert
plot(mp_vert,type="unrooted",lab4ut="axial",
cex=0.8,no.margin=TRUE)
which(common_names=="Lamprey")
names(common_names[which(common_names=="Lamprey")])
rooted.mp_vert<-root(mp_vert,
outgroup=names(common_names[which(common_names=="Lamprey")]),
resolve.root=TRUE)
## plot our newly rooted tree
plotTree(rooted.mp_vert,lwd=1,ftype="i")
## get the "true" tree to compare
craniate_timetree<-read.tree(
file="https://liamrevell.github.io/biol634/data/craniata_tree.nwk")
craniate_timetree
plotTree(craniate_timetree,ftype="i",lwd=1)
## create cophylo plot
vert_cophylo<-cophylo(rooted.mp_vert,
craniate_timetree)
plot(vert_cophylo,link.type="curved")
## substitute names
grep("Gallus",craniate_timetree$tip.label)
grep("Gallus",
rooted.mp_vert$tip.label)
rooted.mp_vert$tip.label[grep("Gallus",
rooted.mp_vert$tip.label)]
craniate_timetree$tip.label[ind]<-
rooted.mp_vert$tip.label[grep("Gallus",
rooted.mp_vert$tip.label)]
## substitute names
ind<-grep("Gallus",craniate_timetree$tip.label)
craniate_timetree$tip.label[ind]<-
rooted.mp_vert$tip.label[grep("Gallus",
rooted.mp_vert$tip.label)]
## create cophylo plot
vert_cophylo<-cophylo(rooted.mp_vert,
craniate_timetree)
plot(vert_cophylo,link.type="curved")
ind<-grep("Physeter",craniate_timetree$tip.label)
craniate_timetree$tip.label[ind]<-
rooted.mp_vert$tip.label[grep("Physeter",
rooted.mp_vert$tip.label)]
## create cophylo plot
vert_cophylo<-cophylo(rooted.mp_vert,
craniate_timetree)
plot(vert_cophylo,link.type="curved")
ind<-grep("Dryophytes",craniate_timetree$tip.label)
craniate_timetree$tip.label[ind]<-
rooted.mp_vert$tip.label[grep("Hyla",
rooted.mp_vert$tip.label)]
## create cophylo plot
vert_cophylo<-cophylo(rooted.mp_vert,
craniate_timetree)
plot(vert_cophylo,link.type="curved")
attr(rooted.mp_vert,"pscore")
## compute the parsimony score on our "true" tree
parsimony(craniate_timetree,vert_phyDat)
## estimate the tree using likelihood
rVert<-rtree(n=length(vert_phyDat),
tip.label=names(vert_phyDat),
rooted=FALSE)
args(pml)
vert_pml<-pml(rVert,data=vert_phyDat)
vert_pml
mk.vert_pml<-optim.pml(vert_pml,rearrangement="stochastic")
mk.vert_pml
plotTree(mk.vert_pml$tree,lwd=1)
head(common_names)
ml_tree<-root(mk.vert_pml$tree,outgroup="Petromyzon_marinus",
resolve.root=TRUE)
plotTree(ml_tree,ftype="i")
plotTree(compute.brlen(ml_tree),ftype="i")
vert_cophylo2<-cophylo(compute.brlen(ml_tree),
craniate_timetree)
plot(vert_cophylo2,link.type="curved")
library(phytools)
library(phangorn)
dna<-read.dna(
file="https://liamrevell.github.io/biol634/data/Laurasiatherian.nex",
format="nexus")
?read.dna
dna<-read.nexus.data(
file="https://liamrevell.github.io/biol634/data/Laurasiatherian.nex",
format="nexus")
dna<-read.nexus.data(
file="https://liamrevell.github.io/biol634/data/Laurasiatherian.nex")
dna
str(dna)
bs<-sample(1:length(dna),length(dna),replace=TRUE)
bs
ncol(dna)
bs<-sample(1:length(dna[[1]]),length(dna),replace=TRUE)
bs
bs<-sample(1:length(dna[[1]]),length(dna[[1]]),replace=TRUE)
bs
dna_bs<-lapply(dna,function(x,bs) x[bs])
dna_bs
getwd()
setwd("courses/BIOL634-fall2025")
setwd("biol634/")
setwd("hw/2")
?root
?make.simmap
?modelTest
