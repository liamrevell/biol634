for(i in 1:nrep)
bs_trees[[i]]<-NJ(bs_dna[[i]],model="JC69")
for(i in 1:nrep){
D<-dist.dna(dna[[i]],model="JC69")
bs_trees[[i]]<-NJ(D)
}
for(i in 1:nrep){
D<-dist.dna(bs_dna[[i]],model="JC69")
bs_trees[[i]]<-NJ(D)
}
bs_trees
?plotBS
plotBS(trees=bs_trees)
## get NJ tree from full data
nj_tree<-NJ(dist.dna(dna,model="JC69"))
## step 1: bootstrap the datasets to create 100 BS replicates
nrep<-100
nsites<-ncol(dna)
bs_dna<-vector(mode="list",length=nrep)
for(i in 1:nrep)
bs_dna[[i]]<-dna[,sample(1:nsites,replace=TRUE)]
## step 2: estimate the BS trees using NJ
bs_trees<-vector(mode="list",length=nrep)
for(i in 1:nrep){
D<-dist.dna(bs_dna[[i]],model="JC69")
bs_trees[[i]]<-NJ(D)
}
rooted.bs_trees<-root(bs_trees,outgroup=outgroup,
resolve.root=TRUE)
class(bs_trees)<-"multiPhylo"
rooted.bs_trees<-root(bs_trees,outgroup=outgroup,
resolve.root=TRUE)
## step 3 (optional): root all trees
outgroup="Lemur"
rooted.nj_tree<-root(nj_tree,outgroup=outgroup,
resolve.root=TRUE)
class(bs_trees)<-"multiPhylo"
rooted.bs_trees<-root(bs_trees,outgroup=outgroup,
resolve.root=TRUE)
?plotBS
## step 4 (optional): use ape::prop.clades to compute BS %
bs<-prop.clades(rooted.nj_tree,bs_trees,rooted=TRUE)
bs
## step 4 (optional): use ape::prop.clades to compute BS %
bs<-prop.clades(rooted.nj_tree,rooted.bs_trees,rooted=TRUE)
plotBS(rooted.nj_tree,trees=rooted.bs_trees)
bs
plotBS(rooted.nj_tree,trees=rooted.bs_trees,rooted=TRUE)
plotBS(rooted.nj_tree,trees=rooted.bs_trees)
plotBS(rooted.nj_tree,trees=rooted.bs_trees)
nodelabels()
## step 5 (optional): use ape::nodelabels to add BS % to tree
plotTree(rooted.nj_tree)
nodelabels()
nodelabels(bs)
nodelabels(bs,bg="transparent")
## step 5 (optional): use ape::nodelabels to add BS % to tree
plotTree(rooted.nj_tree)
nodelabels(bs,bg="transparent")
?nodelabels
## step 5 (optional): use ape::nodelabels to add BS % to tree
plotTree(rooted.nj_tree)
nodelabels(bs,adj=c(0,0))
nodelabels(bs,adj=c(-1,0))
nodelabels(bs,adj=c(1,0))
nodelabels(bs,adj=c(1,-1))
## step 5 (optional): use ape::nodelabels to add BS % to tree
plotTree(rooted.nj_tree)
nodelabels(bs,adj=c(1,1))
## step 5 (optional): use ape::nodelabels to add BS % to tree
plotTree(rooted.nj_tree)
nodelabels(bs,adj=c(1,1),cex=0.8)
nodelabels(bs/100,adj=c(1,1),cex=0.8)
nodelabels(bs/100,adj=c(1,1),cex=0.8,shape="none")
## step 5 (optional): use ape::nodelabels to add BS % to tree
plotTree(rooted.nj_tree)
nodelabels(bs/100,adj=c(1,1),cex=0.8,shape="none")
?nodelabels
?nodelabels
## step 5 (optional): use ape::nodelabels to add BS % to tree
plotTree(rooted.nj_tree)
nodelabels(bs/100,adj=c(1,1),cex=0.8,frame=NULL)
## step 5 (optional): use ape::nodelabels to add BS % to tree
plotTree(rooted.nj_tree)
nodelabels(bs/100,adj=c(1,1),cex=0.8,frame="none")
## step 5 (optional): use ape::nodelabels to add BS % to tree
plotTree(rooted.nj_tree)
nodelabels(bs/100,adj=c(1.5,1.5),cex=0.8,frame="none")
## step 5 (optional): use ape::nodelabels to add BS % to tree
plotTree(rooted.nj_tree)
nodelabels(bs/100,adj=c(1.2,1.2),cex=0.8,frame="none")
## step 4 (optional): use phangorn::plotBS instead
plotBS(rooted.nj_tree,rooted.bs_trees)
## preliminaries
## load packages
library(phytools)
library(phangorn)
## load data from file
dna<-read.dna(
file="https://liamrevell.github.io/biol634/data/primates.dna")
## get NJ tree from full data
nj_tree<-NJ(dist.dna(dna,model="JC69"))
## step 1: bootstrap the datasets to create 100 BS replicates
nrep<-100
nsites<-ncol(dna)
bs_dna<-vector(mode="list",length=nrep)
for(i in 1:nrep)
bs_dna[[i]]<-dna[,sample(1:nsites,replace=TRUE)]
## step 2: estimate the BS trees using NJ
bs_trees<-vector(mode="list",length=nrep)
for(i in 1:nrep){
D<-dist.dna(bs_dna[[i]],model="JC69")
bs_trees[[i]]<-NJ(D)
}
## step 3 (optional): root all trees
outgroup="Lemur"
rooted.nj_tree<-root(nj_tree,outgroup=outgroup,
resolve.root=TRUE)
class(bs_trees)<-"multiPhylo"
rooted.bs_trees<-root(bs_trees,outgroup=outgroup,
resolve.root=TRUE)
## step 4 (optional): use ape::prop.clades to compute BS %
bs<-prop.clades(rooted.nj_tree,rooted.bs_trees,rooted=TRUE)
bs
## step 5 (optional): use ape::nodelabels to add BS % to tree
plotTree(rooted.nj_tree)
nodelabels(bs/100,adj=c(1.2,1.2),cex=0.9,frame="none")
## step 4 (optional): use phangorn::plotBS instead
plotBS(rooted.nj_tree,rooted.bs_trees)
## step 5 (optional): use ape::nodelabels to add BS % to tree
plotTree(rooted.nj_tree)
nodelabels(bs/100,adj=c(1.2,1.2),cex=0.9,frame="none")
## step 4 (optional): use phangorn::plotBS instead
plotBS(rooted.nj_tree,rooted.bs_trees)
## step 5 (optional): use ape::nodelabels to add BS % to tree
plotTree(rooted.nj_tree)
nodelabels(bs/100,adj=c(1.2,1.2),cex=0.9,frame="none")
## step 4 (optional): use phangorn::plotBS instead
plotBS(rooted.nj_tree,rooted.bs_trees)
library(phytools)
library(phangorn)
## read data from file
dna<-read.dna(file=
"https://liamrevell.github.io/biol634/data/primates.dna")
dna
## get NJ from this dataset
nj_tree<-NJ(dist.dna(dna,model="JC69"))
plot(nj_tree,type="unrooted")
nsites<-ncol(dna)
nsites
sample(1:nsites,replace=TRUE)
dna[,sample(1:nsites,replace=TRUE)]
## step 1: bootstrap the data 100 times
nrep<-100 ## this is my number of replicates
nsites<-ncol(dna) ## this is the number of sites in my alignment
bs_dna<-vector(mode="list",length=nrep)
for(i in 1:nrep)
bs_dna[[i]]<-dna[,sample(1:nsites,replace=TRUE)]
length(bs_dna)
head(bs_dna)
## step 2: compute NJ tree on all 100 alignments
bs_trees<-vector(mode="list",length=nrep)
i<-1
D<-dist.dna(bs_dna[[i]],model="JC69")
D
bs_trees[[i]]<-NJ(bs_dna[[i]])
bs_trees[[i]]<-NJ(D)
bs_trees
## step 2: compute NJ tree on all 100 alignments
bs_trees<-vector(mode="list",length=nrep)
for(i in 1:nrep){
D<-dist.dna(bs_dna[[i]],model="JC69")
bs_trees[[i]]<-NJ(D)
}
head(bs_trees)
## step 3 (optional): root all trees
outgroup<-"Lemur"
rooted.nj_tree<-root(nj_tree,outgroup=outgroup,
resolve.root=TRUE)
plotTree(rooted.nj_tree)
args(lapply())
args(lapply
)
args(lapply)
## option to root all the trees in our list using lapply
rooted.bs_trees<-lapply(bs_trees,FUN=root,
outgroup=outgroup,resolve.root=TRUE)
par(mfrow=c(10,10))
par(mfrow=c(10,10))
plotTree(rooted.bs_trees)
rooted.bs_trees
lapply(rooted.bs_trees,plotTree)
lapply(rooted.bs_trees,plotTree,fsize=0.5)
lapply(rooted.bs_trees,plotTree,fsize=0.5,lwd=1)
class(rooted.bs_trees)<-"multiPhylo"
rooted.bs_trees
dev.off()
par(mfrow=c(10,10))
plotTree(rooted.bs_trees,fsize=0.6,lwd=1)
class(rooted.bs_trees)<-"multiphylo"
rooted.bs_trees
class(rooted.bs_trees)<-"multiPhylo"
?plotBS
## step4 (optional): use ape::prop.clades to compute BS %
bs<-prop.clades(rooted.nj_tree,rooted.bs_trees,
rooted=TRUE)
bs
plotTree(rooted.nj_tree)
nodelabels()
dev.off()
dev.off()
plotTree(rooted.nj_tree)
nodelabels()
plotTree(rooted.nj_tree)
nodelabels(bs)
nodelabels(bs/100,adj=c(1.2,1.2),cex=0.9,frame="none")
plotTree(rooted.nj_tree)
nodelabels(bs/100,adj=c(1.2,1.2),cex=0.9,frame="none")
rooted.nj_tree$node.label<-bs/100
plotTree(rooted.nj_tree)
nodelabels()
rooted.nj_tree$node.label<-bs/100
plotTree(rooted.nj_tree)
nodelabels()
nodelabels(rooted.nj_tree$node.label)
plotTree(rooted.nj_tree)
nodelabels(bs/100,adj=c(1.2,1.2),cex=0.9,frame="none")
## we could've skipped all this....
plotBS(rooted.nj_tree,rooted.bs_trees)
nsites<-ncol(dna)
foo<-function(X,nsites) X[,sample(1:nsites,replace=TRUE)]
bs_dna<-replicate(nrep,foo(dna,nsites),simplify=FALSE)
bs_dna
NJ(dist.dna(dna,model="JC69"))
root(NJ(dist.dna(dna,model="JC69")),
outgroup=outgroup,resolve.root=TRUE)
foo<-function(X) root(NJ(dist.dna(X,model="JC69")),
outgroup=outgroup,resolve.root=TRUE)
foo<-function(X) root(NJ(dist.dna(X,model="JC69")),
outgroup=outgroup,resolve.root=TRUE)
rooted.bs_trees<-lapply(bs_dna,foo)
rooted.bs_trees
njBoot<-function(dna,nrep=100,outgroup){
nsites<-ncol(dna)
foo<-function(X,nsites) X[,sample(1:nsites,replace=TRUE)]
bs_dna<-replicate(nrep,foo(dna,nsites),simplify=FALSE)
rooted.nj_tree<-root(NJ(dist.dna(dna,model="JC69")),
outgroup=outgroup,resolve.root=TRUE)
foo<-function(X) root(NJ(dist.dna(X,model="JC69")),
outgroup=outgroup,resolve.root=TRUE)
rooted.bs_trees<-lapply(bs_dna,foo)
bs<-prop.clades(rooted.nj_tree,rooted.bs_trees)
plotTree(rooted.nj_tree,lwd=1)
nodelabels(bs/100,adj=c(1.2,1.2),cex=0.9,frame="none")
rooted.nj_tree$node.label<-bs/100
return(rooted.nj_tree)
}
rm(list=ls())
ls()
## read data from file
dna<-read.dna(file=
"https://liamrevell.github.io/biol634/data/primates.dna")
## test
rm(list=ls())
XX<-read.dna(file=
"https://liamrevell.github.io/biol634/data/primates.dna")
njBoot(X)->bootstrapped_tree
njBoot<-function(dna,nrep=100,outgroup){
nsites<-ncol(dna)
foo<-function(X,nsites) X[,sample(1:nsites,replace=TRUE)]
bs_dna<-replicate(nrep,foo(dna,nsites),simplify=FALSE)
rooted.nj_tree<-root(NJ(dist.dna(dna,model="JC69")),
outgroup=outgroup,resolve.root=TRUE)
foo<-function(X) root(NJ(dist.dna(X,model="JC69")),
outgroup=outgroup,resolve.root=TRUE)
rooted.bs_trees<-lapply(bs_dna,foo)
bs<-prop.clades(rooted.nj_tree,rooted.bs_trees)
plotTree(rooted.nj_tree,lwd=1)
nodelabels(bs/100,adj=c(1.2,1.2),cex=0.9,frame="none")
rooted.nj_tree$node.label<-bs/100
return(rooted.nj_tree)
}
njBoot<-function(dna,nrep=100,outgroup){
nsites<-ncol(dna)
foo<-function(X,nsites) X[,sample(1:nsites,replace=TRUE)]
bs_dna<-replicate(nrep,foo(dna,nsites),simplify=FALSE)
rooted.nj_tree<-root(NJ(dist.dna(dna,model="JC69")),
outgroup=outgroup,resolve.root=TRUE)
foo<-function(X) root(NJ(dist.dna(X,model="JC69")),
outgroup=outgroup,resolve.root=TRUE)
rooted.bs_trees<-lapply(bs_dna,foo)
bs<-prop.clades(rooted.nj_tree,rooted.bs_trees)
plotTree(rooted.nj_tree,lwd=1)
nodelabels(bs/100,adj=c(1.2,1.2),cex=0.9,frame="none")
rooted.nj_tree$node.label<-bs/100
return(rooted.nj_tree)
}
## test
XX<-read.dna(file=
"https://liamrevell.github.io/biol634/data/primates.dna")
njBoot(XX)->bootstrapped_tree
njBoot(XX,outgroup="Lemur")->bootstrapped_tree
dev.off()
njBoot(XX,outgroup="Lemur")->bootstrapped_tree
bootstrapped_tree
YY<-read.nexus.data(
file="https://liamrevell.github.io/biol634/data/Jackman-etal.nex")
YY
YY<-as.DNAbin(YY)
YY
?as.DNAbin
YY<-as.DNAbin(as.matrix(YY))
YY<-read.nexus.data(
file="https://liamrevell.github.io/biol634/data/Jackman-etal.nex")
YY<-as.DNAbin(as.matrix(YY))
YY
as.matrix(YY)
YY<-read.phyDat(
file="https://liamrevell.github.io/biol634/data/Jackman-etal.nex",
format="nexus")
YY<-as.DNAbin(YY)
YY
njBoot(YY)
njBoot(YY,outroup="Diplolaemus_darwinii")
njBoot(YY,outgroup="Diplolaemus_darwinii")
## clean up our workspace
rm(list=ls())
## load packages
library(phytools)
library(phangorn)
## read data from file
dna<-read.dna(file=
"https://liamrevell.github.io/biol634/data/primates.dna")
## get NJ from this dataset
nj_tree<-NJ(dist.dna(dna,model="JC69"))
plot(nj_tree,type="unrooted")
## step 1: bootstrap the data 100 times
nrep<-100 ## this is my number of replicates
nsites<-ncol(dna) ## this is the number of sites in my alignment
bs_dna<-vector(mode="list",length=nrep)
for(i in 1:nrep)
bs_dna[[i]]<-dna[,sample(1:nsites,replace=TRUE)]
## inspect our object to make sure we're doing things correctly
## (this will mainly tell us if we have done things incorrectly)
length(bs_dna)
head(bs_dna)
## step 2: compute NJ tree on all 100 alignments
bs_trees<-vector(mode="list",length=nrep)
for(i in 1:nrep){
D<-dist.dna(bs_dna[[i]],model="JC69")
bs_trees[[i]]<-NJ(D)
}
## step 3 (optional): root all trees
## we can compute bootstrap proportions for unrooted trees, but
## rooting makes it more intuitive
outgroup<-"Lemur"
rooted.nj_tree<-root(nj_tree,outgroup=outgroup,
resolve.root=TRUE)
plotTree(rooted.nj_tree)
## optional: root all the trees in our list using lapply
rooted.bs_trees<-lapply(bs_trees,FUN=root,
outgroup=outgroup,resolve.root=TRUE)
par(mfrow=c(10,10))
lapply(rooted.bs_trees,plotTree,fsize=0.5,lwd=1)
class(rooted.bs_trees)<-"multiPhylo" ## assign class attribute
rooted.bs_trees
## optional: root all trees using root (which is vectorized)
class(bs_trees)<-"multiPhylo"
rooted.bs_trees<-root(bs_trees,outgroup=outgroup,
resolve.root=TRUE)
rooted.bs_trees
## try to plot all our BS trees in a grid
dev.off()
par(mfrow=c(10,10))
plotTree(rooted.bs_trees,fsize=0.6,lwd=1)
## step4 (optional): use ape::prop.clades to compute BS %
bs<-prop.clades(rooted.nj_tree,rooted.bs_trees,
rooted=TRUE)
bs
dev.off() ## reset plotting device
## plot our bootstrap percent
plotTree(rooted.nj_tree)
nodelabels(bs)
## let's make it look a little nicer
plotTree(rooted.nj_tree)
nodelabels(bs/100,adj=c(1.2,1.2),cex=0.9,frame="none")
## we could've skipped all this....
plotBS(rooted.nj_tree,rooted.bs_trees)
## clean up our workspace
rm(list=ls())
## let's make a function for all this
njBoot<-function(dna,nrep=100,outgroup){
nsites<-ncol(dna)
foo<-function(X,nsites) X[,sample(1:nsites,replace=TRUE)]
bs_dna<-replicate(nrep,foo(dna,nsites),simplify=FALSE)
rooted.nj_tree<-root(NJ(dist.dna(dna,model="JC69")),
outgroup=outgroup,resolve.root=TRUE)
foo<-function(X) root(NJ(dist.dna(X,model="JC69")),
outgroup=outgroup,resolve.root=TRUE)
rooted.bs_trees<-lapply(bs_dna,foo)
bs<-prop.clades(rooted.nj_tree,rooted.bs_trees)
plotTree(rooted.nj_tree,lwd=1)
nodelabels(bs/100,adj=c(1.2,1.2),cex=0.9,frame="none")
rooted.nj_tree$node.label<-bs/100
return(rooted.nj_tree)
}
## we can run a test on our original dataset
XX<-read.dna(file=
"https://liamrevell.github.io/biol634/data/primates.dna")
njBoot(XX,outgroup="Lemur")->bootstrapped_tree
## now let's do it with the Jackman et al. data
## (we read it in using phangorn::read.phyDat to more easily convert
## to "DNAbin" in matrix)
YY<-read.phyDat(
file="https://liamrevell.github.io/biol634/data/Jackman-etal.nex",
format="nexus")
YY<-as.DNAbin(YY)
njBoot(YY,outgroup="Diplolaemus_darwinii")
## load package
library(phangorn)
library(phytools)
ml_tree<-read.nexus(
file="https://liamrevell.github.io/biol634/data/LaurasiatherianML.nex")
plotTree(ml_tree)
rooted.ml_tree<-root(ml_tree,outgroup="Platypus")
plotTree(rooted.ml_tree)
## drop platypus
rooted.ml_tree<-drop.tip(rooted.ml_tree,"Platypus")
plotTree(rooted.ml_tree)
?findMRCA
nodes<-findMRCA(rooted.ml_tree,c("Possum","Cat"))
nodes
nodelabels(text="is this right?",node=47)
nodes<-c(
findMRCA(rooted.ml_tree,c("Possum","Cat")),
findMRCA(rooted.ml_tree,c("Squirrel","Mouse")))
nodes
nodelabels(text="is this correct?",node=nodes[2])
nodes<-c(
findMRCA(rooted.ml_tree,c("Possum","Cat")),
findMRCA(rooted.ml_tree,c("Squirrel","Mouse")),
findMRCA(rooted.ml_tree,c("Pig","BlueWhale")),
findMRCA(rooted.ml_tree,c("Human","Baboon")),
findMRCA(rooted.ml_tree,c("Horse","Donkey")))
nodes
plotTree(rooted.ml_tree)
nodelabels(node=nodes)
age_max<-c(166,75,66,31.35,10)
age_min<-c(159,66,59,27.95,6.2)
?makeChronosCalib
calibration<-makeChronosCalib(
rooted.ml_tree,
node=nodes,
age.min=age_min,
age.max=age_max)
calibration
pl_tree<-chronos(rooted.ml_tree,calibration=calibration)
plotTree(rooted.ml_tree,fsize=0.7)
par(mfrow=c(1,2))
plotTree(rooted.ml_tree,fsize=0.7)
plotTree(pl_tree,fsize=0.7)
pl_tree<-chronos(rooted.ml_tree,calibration=calibration,
lambda=0.1)
pl_tree<-chronos(rooted.ml_tree,calibration=calibration)
pl_tree0.1<-chronos(rooted.ml_tree,calibration=calibration,
lambda=0.1)
plotTree(pl_tree0.1,fsize=0.7)
par(mfrow=c(1,2))
plotTree(pl_tree,fsize=0.7)
plotTree(pl_tree0.1,fsize=0.7)
?densityTree
?compare.chronograms
dev.off()
compare.chronograms(pl_tree,pl_tree0.1)
compare.chronograms(pl_tree,pl_tree0.1,ftype="i")
pl_tree10<-chronos(rooted.ml_tree,calibration=calibration,
lambda=10)
compare.chronograms(pl_tree,pl_tree10)
dev.off()
plotTree(pl_tree,mar=c(2.1,2.1,0.1,0.1))
axis(1)
?par
par()$usr
192.951687-max(nodeHeights(pl_tree))
plotTree(pl_tree,xlim=c(max(nodeHeights(pl_tree),-33)))
plotTree(pl_tree,xlim=c(max(nodeHeights(pl_tree)),-33))
plotTree(pl_tree,xlim=c(max(nodeHeights(pl_tree)),-33),
direction="leftwards")
plotTree(pl_tree,xlim=c(max(nodeHeights(pl_tree)),-33),
direction="leftwards",
mar=c(2.1,1.1,1.1,1.1))
axis()
axis(1)
calibration
abline(v=age_min,lty="dotted")
abline(v=age_min,lty="dotted")
abline(v=age_max,lty="dotted")
nodelabels(node=nodes,cex=0.6)
plotTree(pl_tree,xlim=c(max(nodeHeights(pl_tree)),-33),
direction="leftwards",
mar=c(2.1,1.1,1.1,1.1))
axis(1)
abline(v=age_min,lty="dotted",palette()[1:5])
abline(v=age_min,lty="dotted",col=palette()[1:5])
abline(v=age_max,lty="dotted",col=palette()[1:5])
nodelabels(node=nodes,cex=0.6)
getwd()
compare.chronograms(pl_tree,pl_tree0.1)
compare.chronograms
getwd()
setwd('courses/BIOL634-fall2025/biol634/')
list.files("ex/9")
