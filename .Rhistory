## step 4 (optional): use phangorn::plotBS instead
plotBS(rooted.nj_tree,rooted.bs_trees)
## preliminaries
## load packages
library(phytools)
library(phangorn)
## load data from file
dna<-read.dna(
file="https://liamrevell.github.io/biol634/data/primates.dna")
## get NJ tree from full data
nj_tree<-NJ(dist.dna(dna,model="JC69"))
## step 1: bootstrap the datasets to create 100 BS replicates
nrep<-100
nsites<-ncol(dna)
bs_dna<-vector(mode="list",length=nrep)
for(i in 1:nrep)
bs_dna[[i]]<-dna[,sample(1:nsites,replace=TRUE)]
## step 2: estimate the BS trees using NJ
bs_trees<-vector(mode="list",length=nrep)
for(i in 1:nrep){
D<-dist.dna(bs_dna[[i]],model="JC69")
bs_trees[[i]]<-NJ(D)
}
## step 3 (optional): root all trees
outgroup="Lemur"
rooted.nj_tree<-root(nj_tree,outgroup=outgroup,
resolve.root=TRUE)
class(bs_trees)<-"multiPhylo"
rooted.bs_trees<-root(bs_trees,outgroup=outgroup,
resolve.root=TRUE)
## step 4 (optional): use ape::prop.clades to compute BS %
bs<-prop.clades(rooted.nj_tree,rooted.bs_trees,rooted=TRUE)
bs
## step 5 (optional): use ape::nodelabels to add BS % to tree
plotTree(rooted.nj_tree)
nodelabels(bs/100,adj=c(1.2,1.2),cex=0.9,frame="none")
## step 4 (optional): use phangorn::plotBS instead
plotBS(rooted.nj_tree,rooted.bs_trees)
## step 5 (optional): use ape::nodelabels to add BS % to tree
plotTree(rooted.nj_tree)
nodelabels(bs/100,adj=c(1.2,1.2),cex=0.9,frame="none")
## step 4 (optional): use phangorn::plotBS instead
plotBS(rooted.nj_tree,rooted.bs_trees)
## step 5 (optional): use ape::nodelabels to add BS % to tree
plotTree(rooted.nj_tree)
nodelabels(bs/100,adj=c(1.2,1.2),cex=0.9,frame="none")
## step 4 (optional): use phangorn::plotBS instead
plotBS(rooted.nj_tree,rooted.bs_trees)
library(phytools)
library(phangorn)
## read data from file
dna<-read.dna(file=
"https://liamrevell.github.io/biol634/data/primates.dna")
dna
## get NJ from this dataset
nj_tree<-NJ(dist.dna(dna,model="JC69"))
plot(nj_tree,type="unrooted")
nsites<-ncol(dna)
nsites
sample(1:nsites,replace=TRUE)
dna[,sample(1:nsites,replace=TRUE)]
## step 1: bootstrap the data 100 times
nrep<-100 ## this is my number of replicates
nsites<-ncol(dna) ## this is the number of sites in my alignment
bs_dna<-vector(mode="list",length=nrep)
for(i in 1:nrep)
bs_dna[[i]]<-dna[,sample(1:nsites,replace=TRUE)]
length(bs_dna)
head(bs_dna)
## step 2: compute NJ tree on all 100 alignments
bs_trees<-vector(mode="list",length=nrep)
i<-1
D<-dist.dna(bs_dna[[i]],model="JC69")
D
bs_trees[[i]]<-NJ(bs_dna[[i]])
bs_trees[[i]]<-NJ(D)
bs_trees
## step 2: compute NJ tree on all 100 alignments
bs_trees<-vector(mode="list",length=nrep)
for(i in 1:nrep){
D<-dist.dna(bs_dna[[i]],model="JC69")
bs_trees[[i]]<-NJ(D)
}
head(bs_trees)
## step 3 (optional): root all trees
outgroup<-"Lemur"
rooted.nj_tree<-root(nj_tree,outgroup=outgroup,
resolve.root=TRUE)
plotTree(rooted.nj_tree)
args(lapply())
args(lapply
)
args(lapply)
## option to root all the trees in our list using lapply
rooted.bs_trees<-lapply(bs_trees,FUN=root,
outgroup=outgroup,resolve.root=TRUE)
par(mfrow=c(10,10))
par(mfrow=c(10,10))
plotTree(rooted.bs_trees)
rooted.bs_trees
lapply(rooted.bs_trees,plotTree)
lapply(rooted.bs_trees,plotTree,fsize=0.5)
lapply(rooted.bs_trees,plotTree,fsize=0.5,lwd=1)
class(rooted.bs_trees)<-"multiPhylo"
rooted.bs_trees
dev.off()
par(mfrow=c(10,10))
plotTree(rooted.bs_trees,fsize=0.6,lwd=1)
class(rooted.bs_trees)<-"multiphylo"
rooted.bs_trees
class(rooted.bs_trees)<-"multiPhylo"
?plotBS
## step4 (optional): use ape::prop.clades to compute BS %
bs<-prop.clades(rooted.nj_tree,rooted.bs_trees,
rooted=TRUE)
bs
plotTree(rooted.nj_tree)
nodelabels()
dev.off()
dev.off()
plotTree(rooted.nj_tree)
nodelabels()
plotTree(rooted.nj_tree)
nodelabels(bs)
nodelabels(bs/100,adj=c(1.2,1.2),cex=0.9,frame="none")
plotTree(rooted.nj_tree)
nodelabels(bs/100,adj=c(1.2,1.2),cex=0.9,frame="none")
rooted.nj_tree$node.label<-bs/100
plotTree(rooted.nj_tree)
nodelabels()
rooted.nj_tree$node.label<-bs/100
plotTree(rooted.nj_tree)
nodelabels()
nodelabels(rooted.nj_tree$node.label)
plotTree(rooted.nj_tree)
nodelabels(bs/100,adj=c(1.2,1.2),cex=0.9,frame="none")
## we could've skipped all this....
plotBS(rooted.nj_tree,rooted.bs_trees)
nsites<-ncol(dna)
foo<-function(X,nsites) X[,sample(1:nsites,replace=TRUE)]
bs_dna<-replicate(nrep,foo(dna,nsites),simplify=FALSE)
bs_dna
NJ(dist.dna(dna,model="JC69"))
root(NJ(dist.dna(dna,model="JC69")),
outgroup=outgroup,resolve.root=TRUE)
foo<-function(X) root(NJ(dist.dna(X,model="JC69")),
outgroup=outgroup,resolve.root=TRUE)
foo<-function(X) root(NJ(dist.dna(X,model="JC69")),
outgroup=outgroup,resolve.root=TRUE)
rooted.bs_trees<-lapply(bs_dna,foo)
rooted.bs_trees
njBoot<-function(dna,nrep=100,outgroup){
nsites<-ncol(dna)
foo<-function(X,nsites) X[,sample(1:nsites,replace=TRUE)]
bs_dna<-replicate(nrep,foo(dna,nsites),simplify=FALSE)
rooted.nj_tree<-root(NJ(dist.dna(dna,model="JC69")),
outgroup=outgroup,resolve.root=TRUE)
foo<-function(X) root(NJ(dist.dna(X,model="JC69")),
outgroup=outgroup,resolve.root=TRUE)
rooted.bs_trees<-lapply(bs_dna,foo)
bs<-prop.clades(rooted.nj_tree,rooted.bs_trees)
plotTree(rooted.nj_tree,lwd=1)
nodelabels(bs/100,adj=c(1.2,1.2),cex=0.9,frame="none")
rooted.nj_tree$node.label<-bs/100
return(rooted.nj_tree)
}
rm(list=ls())
ls()
## read data from file
dna<-read.dna(file=
"https://liamrevell.github.io/biol634/data/primates.dna")
## test
rm(list=ls())
XX<-read.dna(file=
"https://liamrevell.github.io/biol634/data/primates.dna")
njBoot(X)->bootstrapped_tree
njBoot<-function(dna,nrep=100,outgroup){
nsites<-ncol(dna)
foo<-function(X,nsites) X[,sample(1:nsites,replace=TRUE)]
bs_dna<-replicate(nrep,foo(dna,nsites),simplify=FALSE)
rooted.nj_tree<-root(NJ(dist.dna(dna,model="JC69")),
outgroup=outgroup,resolve.root=TRUE)
foo<-function(X) root(NJ(dist.dna(X,model="JC69")),
outgroup=outgroup,resolve.root=TRUE)
rooted.bs_trees<-lapply(bs_dna,foo)
bs<-prop.clades(rooted.nj_tree,rooted.bs_trees)
plotTree(rooted.nj_tree,lwd=1)
nodelabels(bs/100,adj=c(1.2,1.2),cex=0.9,frame="none")
rooted.nj_tree$node.label<-bs/100
return(rooted.nj_tree)
}
njBoot<-function(dna,nrep=100,outgroup){
nsites<-ncol(dna)
foo<-function(X,nsites) X[,sample(1:nsites,replace=TRUE)]
bs_dna<-replicate(nrep,foo(dna,nsites),simplify=FALSE)
rooted.nj_tree<-root(NJ(dist.dna(dna,model="JC69")),
outgroup=outgroup,resolve.root=TRUE)
foo<-function(X) root(NJ(dist.dna(X,model="JC69")),
outgroup=outgroup,resolve.root=TRUE)
rooted.bs_trees<-lapply(bs_dna,foo)
bs<-prop.clades(rooted.nj_tree,rooted.bs_trees)
plotTree(rooted.nj_tree,lwd=1)
nodelabels(bs/100,adj=c(1.2,1.2),cex=0.9,frame="none")
rooted.nj_tree$node.label<-bs/100
return(rooted.nj_tree)
}
## test
XX<-read.dna(file=
"https://liamrevell.github.io/biol634/data/primates.dna")
njBoot(XX)->bootstrapped_tree
njBoot(XX,outgroup="Lemur")->bootstrapped_tree
dev.off()
njBoot(XX,outgroup="Lemur")->bootstrapped_tree
bootstrapped_tree
YY<-read.nexus.data(
file="https://liamrevell.github.io/biol634/data/Jackman-etal.nex")
YY
YY<-as.DNAbin(YY)
YY
?as.DNAbin
YY<-as.DNAbin(as.matrix(YY))
YY<-read.nexus.data(
file="https://liamrevell.github.io/biol634/data/Jackman-etal.nex")
YY<-as.DNAbin(as.matrix(YY))
YY
as.matrix(YY)
YY<-read.phyDat(
file="https://liamrevell.github.io/biol634/data/Jackman-etal.nex",
format="nexus")
YY<-as.DNAbin(YY)
YY
njBoot(YY)
njBoot(YY,outroup="Diplolaemus_darwinii")
njBoot(YY,outgroup="Diplolaemus_darwinii")
## clean up our workspace
rm(list=ls())
## load packages
library(phytools)
library(phangorn)
## read data from file
dna<-read.dna(file=
"https://liamrevell.github.io/biol634/data/primates.dna")
## get NJ from this dataset
nj_tree<-NJ(dist.dna(dna,model="JC69"))
plot(nj_tree,type="unrooted")
## step 1: bootstrap the data 100 times
nrep<-100 ## this is my number of replicates
nsites<-ncol(dna) ## this is the number of sites in my alignment
bs_dna<-vector(mode="list",length=nrep)
for(i in 1:nrep)
bs_dna[[i]]<-dna[,sample(1:nsites,replace=TRUE)]
## inspect our object to make sure we're doing things correctly
## (this will mainly tell us if we have done things incorrectly)
length(bs_dna)
head(bs_dna)
## step 2: compute NJ tree on all 100 alignments
bs_trees<-vector(mode="list",length=nrep)
for(i in 1:nrep){
D<-dist.dna(bs_dna[[i]],model="JC69")
bs_trees[[i]]<-NJ(D)
}
## step 3 (optional): root all trees
## we can compute bootstrap proportions for unrooted trees, but
## rooting makes it more intuitive
outgroup<-"Lemur"
rooted.nj_tree<-root(nj_tree,outgroup=outgroup,
resolve.root=TRUE)
plotTree(rooted.nj_tree)
## optional: root all the trees in our list using lapply
rooted.bs_trees<-lapply(bs_trees,FUN=root,
outgroup=outgroup,resolve.root=TRUE)
par(mfrow=c(10,10))
lapply(rooted.bs_trees,plotTree,fsize=0.5,lwd=1)
class(rooted.bs_trees)<-"multiPhylo" ## assign class attribute
rooted.bs_trees
## optional: root all trees using root (which is vectorized)
class(bs_trees)<-"multiPhylo"
rooted.bs_trees<-root(bs_trees,outgroup=outgroup,
resolve.root=TRUE)
rooted.bs_trees
## try to plot all our BS trees in a grid
dev.off()
par(mfrow=c(10,10))
plotTree(rooted.bs_trees,fsize=0.6,lwd=1)
## step4 (optional): use ape::prop.clades to compute BS %
bs<-prop.clades(rooted.nj_tree,rooted.bs_trees,
rooted=TRUE)
bs
dev.off() ## reset plotting device
## plot our bootstrap percent
plotTree(rooted.nj_tree)
nodelabels(bs)
## let's make it look a little nicer
plotTree(rooted.nj_tree)
nodelabels(bs/100,adj=c(1.2,1.2),cex=0.9,frame="none")
## we could've skipped all this....
plotBS(rooted.nj_tree,rooted.bs_trees)
## clean up our workspace
rm(list=ls())
## let's make a function for all this
njBoot<-function(dna,nrep=100,outgroup){
nsites<-ncol(dna)
foo<-function(X,nsites) X[,sample(1:nsites,replace=TRUE)]
bs_dna<-replicate(nrep,foo(dna,nsites),simplify=FALSE)
rooted.nj_tree<-root(NJ(dist.dna(dna,model="JC69")),
outgroup=outgroup,resolve.root=TRUE)
foo<-function(X) root(NJ(dist.dna(X,model="JC69")),
outgroup=outgroup,resolve.root=TRUE)
rooted.bs_trees<-lapply(bs_dna,foo)
bs<-prop.clades(rooted.nj_tree,rooted.bs_trees)
plotTree(rooted.nj_tree,lwd=1)
nodelabels(bs/100,adj=c(1.2,1.2),cex=0.9,frame="none")
rooted.nj_tree$node.label<-bs/100
return(rooted.nj_tree)
}
## we can run a test on our original dataset
XX<-read.dna(file=
"https://liamrevell.github.io/biol634/data/primates.dna")
njBoot(XX,outgroup="Lemur")->bootstrapped_tree
## now let's do it with the Jackman et al. data
## (we read it in using phangorn::read.phyDat to more easily convert
## to "DNAbin" in matrix)
YY<-read.phyDat(
file="https://liamrevell.github.io/biol634/data/Jackman-etal.nex",
format="nexus")
YY<-as.DNAbin(YY)
njBoot(YY,outgroup="Diplolaemus_darwinii")
20*exp(0.3*20)
20*exp(0.1*20)
20*exp(0.3*10)
20*exp(0.3*20)
20*exp(20*0.3)
exp(20*0.3)
10*exp(20*0.3)
log(2)/0.1
log(4000/20)/20
log(2)/0.27
getwd()
setwd("../Desktop/")
?download.file
download.file(
file="https://liamrevell.github.io/biol634/data/brandley_table.csv".
download.file(
file="https://liamrevell.github.io/biol634/data/brandley_table.csv",
destfile="brandley_table.csv")
download.file(
url="https://liamrevell.github.io/biol634/data/brandley_table.csv",
destfile="brandley_table.csv")
## read file
squamate_data<-read.csv(file="brandley_table.csv",
row.names=1)
head(squamate_data)
## alternatively:
squamate_data<-read.csv(
file="https://liamrevell.github.io/biol634/data/brandley_table.csv",
row.names=1)
head(squamate_data)
## download squamate tree
## https://liamrevell.github.io/biol634/data/squamate.tre
download.file(
url="https://liamrevell.github.io/biol634/data/squamate.tre"
destfile="squamate.tre")
## download squamate tree
## https://liamrevell.github.io/biol634/data/squamate.tre
download.file(
url="https://liamrevell.github.io/biol634/data/squamate.tre",
destfile="squamate.tre")
## load our libraries
library(phytools)
library(geiger)
## read in our squamate tree using ape::read.nexus
squamate_tree<-read.nexus(file="squamate.tre")
squamate_tree
head(squamate_data)
squamate_tree
## function in geiger to check names
?name.check
chk<-name.check(squamate_tree,squamate_data)
chk
summary(chk)
## fix our input data
spp<-rownames(squamate_data)
spp
?gsub
gsub(pattern=" ",replacement="_",x=spp)
spp<-gsub(pattern=" ",replacement="_",x=spp)
spp
rownames(squamate_data)<-spp
head(squamate_data)
## all in one step
rownames(squamate_data)<-gsub(" ","_",rownames(squamate_data))
squamate_data
head(squamate_data)
## let's pull out hind digits
hind_digits<-setNames(squamate_data$Toes,
rownames(squamate_data))
hind_digits
## let's round our character
hind_digits<-round(hind_digits)
hind_digits
## check for alignment of data & tree
name.check(squamate_tree,squamate_data)
squamate_tree$tip.label
hind_digits[squamate_tree$tip.label]
## subsample my data to include only species present
## in the tree
hind_digits<-hind_digits[squamate_tree$tip.label]
## let's use fitMk to fit an ER model
squamate_er<-fitMk(squamate_tree,hind_digits,
pi="fitzjohn")
## let's use fitMk to fit an ER model
squamate_er<-fitMk(squamate_tree,hind_digits,model="ER",
pi="fitzjohn")
squamate_er
plot(squamate_er)
## let's now create a design matrix
## to start, let's imagine a 1-rate loss-only model
D<-matrix(0,6,6,dimnames=list(0:6,0:6))
## let's now create a design matrix
## to start, let's imagine a 1-rate loss-only model
D<-matrix(0,6,6,dimnames=list(0:5,0:5))
D
D[2,1]<-1
D
D[3,2]<-1
D
D[4,3]<-1
D
D[5,4]<-1
D
D[6,5]<-1
D
## here's another way to build the same matrix
D<-matrix(c(
0,0,0,0,0,0,
1,0,0,0,0,0,
0,1,0,0,0,0,
0,0,1,0,0,0,
0,0,0,1,0,0,
0,0,0,0,1,0),
6,6,byrow=TRUE,
dimnames=list(0:5,0:5))
D
## fit the 1-rate loss-only model
squamate_lossonly_1r<-fitMk(squamate_tree,hind_digits,
model=D,pi="fitzjohn")
squamate_lossonly_1r
## plot this model
plot(squamate_lossonly_1r)
## plot this model
plot(squamate_lossonly_1r,show.zeros=FALSE)
anova(squamate_er,squamate_lossonly_1r)
## let's make loss-only multi-rate model
D<-matrix(c(
0,0,0,0,0,0,
1,0,0,0,0,0,
0,2,0,0,0,0,
0,0,3,0,0,0,
0,0,0,4,0,0,
0,0,0,0,5,0),
6,6,byrow=TRUE,
dimnames=list(0:5,0:5))
D
## alternatively
D<-matrix(0,6,6,dimnames=list(0:5,0:5))
D
D[2,1]<-1
D
D[3,2]<-2
D
D[4,3]<-3
D
D[5,4]<-4
D
D[6,5]<-5
D
## let's fit it!!
squamate_lossonly_5r<-fitMk(squamate_tree,hind_digits,
model=D,pi="fitzjohn")
squamate_lossonly_5r
## make a model comparison
anova(squamate_er,squamate_lossonly_1r,
squamate_lossonly_5r)
## plot model
plot(squamate_lossonly_5r,width=TRUE,color=TRUE)
## plot model
plot(squamate_lossonly_5r,width=TRUE,color=TRUE,
show.zeros=TRUE)
## plot model
plot(squamate_lossonly_5r,width=TRUE,color=TRUE,
show.zeros=TRUE)
## plot model
plot(squamate_lossonly_5r,width=TRUE,color=TRUE,
show.zeros=FALSE)
## two process model
D
## two process model
D[3,1]<-6
D[4,1]<-6
D[5,1]<-6
D[6,1]<-6
D
## fit this model
squamate_lossonly_jump<-fitMk(squamate_tree,hind_digits,
model=D,pi="fitzjohn")
plot(squamate_lossonly_jump,width=TRUE,color=TRUE)
anova(squamate_er,squamate_lossonly_1r,
squamate_lossonly_5r,squamate_lossonly_jump)
getwd()
setwd("../Dropbox/")
setwd("courses/BIOL634-fall2025/biol634/")
list.files("ex/11")
